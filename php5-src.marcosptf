########################################################
#arquivo annotations para ajudar ao debugger php5-src
#
########################################################

temos duas tasks para realizar neste repositorio de debugger:
1)alterar uma function php original em c, compilar para ver seu comportamento mudando, apenas para propositos de debugger;

2)criar novas extensoes php para aprender como funciona;
um modelo que estamos estudando sem realzar nenhuma alteracao eh:
php-src/ext/skeleton/

3)a original php-function phpinfo(); eh mt facil de ler e um excelente exemplo para saber como ela funciona;
php-src-marcosptf-debug/ext/standard/info.c

4)funcoes basicas do php:
php-src-marcosptf-debug/ext/standard/basic_functions.c

#php manual offline 
pman strstr
pman str_replace



##########################################################
#annotations php-debugger
##########################################################
#lista de erros do php:
main/main.c:1027

#lista de functions built-in
ext/standard/basic_functions.c

#para mudar a versao do php manualmente:
configure.in


#########################################################
#estudo e analise da function phpcredits();
#########################################################
ext/standard/basic_functions.c:1555, 2739
ext/standard/info.h:60
ext/standard/info.c:1217 => function que declara a function php phpcredits();

#constantes que define contribuidores e a function em c =>  PHPAPI void php_print_credits(int flag TSRMLS_DC);
/ext/standard/credits.h

#declaracao da c function PHPAPI void php_print_credits(int flag TSRMLS_DC);
/home/marcosptf/developer-master/php-src-marcosptf-debug/ext/standard/credits.c



#########################################################
#functions para procurar e ver com elas funcionam
#########################################################
#define CREDIT_LINE(module, authors) php_info_print_table_row(2, module, authors)
php_print_info_htmlhead(TSRMLS_C);
PUTS("<h1>PHP Credits</h1>\n");


####################################################################
#aqui vamos crisr a nossa propria function0 builtin phpmarquinhos();
####################################################################
#ext/standard/basic_functions.c
/* {{{ phpmarquinhos.c */
ZEND_BEGIN_ARG_INFO_EX(arginfo_phpmarquinhos, 0, 0, 0)
     ZEND_ARG_INFO(0, flag)
ZEND_END_ARG_INFO()
 /* }}} */

#criar um arquivo chamado:
#touch ext/standard/phpmarquinhos.h
#touch ext/standard/phpmarquinhos.c
#implementar estes arquivos no /ext/standard/basic_functions.c
#compilar e rodar pra ver se funciona :-)
#n funcionnou, precisamos investigar se isto eh pq n esta aqui:
~/develop/php-src/Zend/zend_builtin_functions.c



#criar um arquivo chamado:
#touch ext/standard/phpmarquinhos.h
#touch ext/standard/phpmarquinhos.c
#implementar estes arquivos no /ext/standard/basic_functions.c
#compilar e rodar pra ver se funciona :-)

#adicionar entrada da phpmarquinhos:
Zend/zend_builtin_functions.c:38,110,250,492



########################################################
#arquivo annotations para ajudar ao debugger php5-src
#
########################################################
temos duas tasks para realizar neste repositorio de debugger:
1)alterar uma function php original em c, compilar para ver seu comportamento mudando, apenas para propositos de debugger;

2)criar novas extensoes php para aprender como funciona;
um modelo que estamos estudando sem realzar nenhuma alteracao eh:
php-src/ext/skeleton/

3)a original php-function phpinfo(); eh mt facil de ler e um excelente exemplo para saber como ela funciona;
php-src-marcosptf-debug/ext/standard/info.c

4)funcoes basicas do php:
ext/standard/basic_functions.c
Zend/zend_builtin_functions.c


#################################
#compilando php no modo debugger#
################################# 
./buildconf --force
./configure --disable-all --disable-cgi --enable-debug --enable-maintainer-zts
make clean
make build-binaries
make build-modules
make
make install

#compilando e habilitando nova ext/
#./buildconf; ./configure --enable-module_name; make
./buildconf --force
./configure --enable-marquinhos
make
make install
#rodando a compilacao em linha unica com ext_ habilitada;
make clean && ./buildconf --force && ./configure ./configure --disable-all --disable-cgi --enable-debug --enable-maintainer-zts --enable-marquinhos &&  make && make install


######################################
#caso na compilacao de algo errado =>#
######################################
make clean
make distclean
./vcsclean
git clean -X -f -d



##################################
#instrucoes de compilacao php-src#
##################################
$ dnf install gcc libc-dev make autoconf automake libtool re2c
$ wget ftp://rpmfind.net/linux/sourceforge/s/sl/sl7-i686-project/yum/FEDOREL7/FULLMISSING/bison-2.7-4.el7.i686.rpm
$ dnf install bison-2.7-4.el7.i686.rpm
$ ./buildconf
#configure PHP in debug mode and with thread safety
$ ./configure --disable-all --disable-cgi --enable-debug --enable-maintainer-zts
# lista todas as opcoes
$ ./configure --help | tail -25 
# exemplo de outras opcoes
# ./configure --disable-all CC=clang CFLAGS="-O3 -march=native"
$ ./configure
$ make
$ make install
$ /usr/local/bin/php --version
#something wrong?
$ make clean
$ make distclean
$ ./vcsclean
$ git clean -X -f -d

# to run tests
$ php run-tests.php -P Zend/ ext/reflection/ ext/standard/tests/array/
$ run-tests.php
$ make test
$ make test TESTS="Zend/ ext/reflection/ ext/standard/tests/array/"    

#depois de compilado rodar para ver os modulos instalados
$ php -m
#lista as opcoes de configuracao do php 
$ php-config
#mostra o php_info();
$ php -i
  
# to change version label
# https://github.com/marcosptf/php-src-marcosptf-debug/blob/master/configure.in#L124
# https://github.com/marcosptf/php-src-marcosptf-debug/blob/master/Zend/zend.c#L130
# https://github.com/marcosptf/php-src-marcosptf-debug/blob/master/Zend/zend.h#L25


# arquivos do diretorio /Zend
#a extensão l é para arquivos que geram lexers
#a extensão y é dos arquivos que geram parsers (através do bison)
#a extensão de .M4 me parece que é fragmento de Makefile
#(aquele arquivo que tem as tasks quando vc digita make alguma coisa, ex.: make install)




######################
#tarefas pendentes =>#
######################
1.criar uma extensao de labs, para ver como funciona;
2.criar um pdf do Zend engine para lermos offline;
3.terminar de ler o livro c, e fazer seus exercicios;
4.ler o codigo da Zend/ para ao menos termos uma nocao do que ele faz;
5.1-precisamos realizar uma pesquisa de um codigo em c que faz uma 
conta de matematica que demore um pouco a sua execucao;
este codigo de matematica nao pode ter dependencias de outras libs, tem que ser nativo;
5.2-criar uma nova funcao dentro do Zend/zend_builtin_functions.c, e aplicar esta matematica;
5.3-criar uma nova extensao e e aplicar esta mesma funcao matematica;
5.4-criar uma nova function em php puro com esta mesma funcao matematica;
5.5-aplicar metricas para ver quem executa mais rapido esta funcao matematica;
6.ler o livro do nikitah popov para aprendermos mais do Zend-Engine;
7.assistir os videos ou procurar os livros da sara golemon;
8.atualizar o nosso repositorio git php-src/ com codigo novo da master;
9.criar um novo repositorio no git onde a master represente => php-src - 1.x/2.x/3.x/4.x/5.x/6.x/7.x/
10.existe um pr mergeado onde um cara cria nova function array, o codigo tah lido, 
quero estes exemplos aqui no diretorio de debuggers, para exemplos de novos codigos;
11.baixar codigos de extensoes criados e colocar eles aqui no diretorio de debuggers;
12.aprender:
gnu gdb;
config.m4;
awk;
zend.y;
zend.l;
bison;
gcc;



























###################################
#zendengine-zendengine-zend-engine#
###################################








